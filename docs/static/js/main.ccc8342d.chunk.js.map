{"version":3,"sources":["tiles.js","player.js","orders.js","App.js","serviceWorker.js","index.js"],"names":["gainFood","foodType","player","numberOfMeeples","Promise","resolve","gainSelectedFoodExcept","forbiddenFood","tile","selectFood","then","amount","alert","activate","sellAFood","loseFood","gainMoney","baseTiles","icon","title","description","type","cost","catch","error","selectTile","placeTile","selectOrder","selectedOrder","fulfilOrder","name","text","playerState","emptyTile","position","fancyTiles","this","randomizeBoard","board","n","allValues","Array","from","_","i","result","selectedIndex","Math","floor","random","length","selected","splice","push","generateRandomSequence","map","j","x","playerHasFoodForOrder","playerFoods","order","Object","entries","foods","every","hasFoodType","createPlayer","ordersLine","tileMarket","modifiers","sushi","noodles","tea","money","points","initiateSelectFood","initiateSelectOrder","initiateSelectTile","initiateTilePlacement","notifyOnMove","isSelecting","allowSelectFood","newSetter","allowSelectOrder","allowSelectTile","allowPlaceTile","loseMoney","Error","gainPoints","callModifiers","call","checkIfHas","allFood","reduce","finally","currentMoney","currentScore","currentFood","currentBoard","getPosition","onMove","cb","move","target","allOrders","currentOrders","some","canFulfil","foodItems","forEach","discardOrder","id","canBuy","selectedTile","selectedPosition","foodTypes","chooseRandomFood","createOrder","min","max","itemCount","createOrdersLine","orders","filter","o","Board","props","class","tiles","orderTilesInGrid","row","onClick","onPlaceTile","stats","symbol","PlayerStats","playerStats","statName","value","statElement","onSelectFood","keys","p1","Order","onSelect","Orders","onSelectOrder","MarketTile","tileProps","TilesMarket","className","fT","App","React","useState","turns","setTurns","setCanMove","actionRequired","setActionRequired","setSelectFood","setSelectOrder","selectMarketTile","setSelectMarketTile","selectTilePlacement","setSelectTilePlacement","t","reject","refresh","s","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccc8342d.chunk.js","sourcesContent":["const gainFood = foodType => (player, numberOfMeeples = 1) => {\r\n    return Promise.resolve(player.gainFood(foodType, numberOfMeeples));\r\n};\r\n\r\nconst gainSelectedFoodExcept = (forbiddenFood, tile, player, numberOfMeeples = 1) => {\r\n    return player.selectFood(false)\r\n        .then(({ foodType, amount }) => {\r\n            if (foodType === forbiddenFood) {\r\n                alert(`Cannot make ${forbiddenFood} here`);\r\n                return tile.activate(player, numberOfMeeples);\r\n            }\r\n            return player.gainFood(foodType, numberOfMeeples);\r\n        });\r\n};\r\n\r\nconst sellAFood = (player, numberOfMeeples = 1) => player.selectFood().then(({ foodType, amount }) => (\r\n    player.loseFood(foodType, amount)\r\n        .then(() => player.gainMoney(amount * numberOfMeeples))\r\n));\r\n\r\nconst baseTiles = [\r\n    {\r\n        icon: '🍣',\r\n        title: 'Sushi',\r\n        description: 'Cook some sushi',\r\n        type: 0,\r\n        cost: 0,\r\n        activate: gainFood('sushi'),\r\n    },\r\n    {\r\n        icon: '🍜',\r\n        title: 'Noodles',\r\n        description: 'Cook some noodles',\r\n        type: 0,\r\n        cost: 0,\r\n        activate: gainFood('noodles'),\r\n    },\r\n    {\r\n        icon: '🍵',\r\n        title: 'Tea',\r\n        description: 'Produce some tea',\r\n        type: 0,\r\n        cost: 0,\r\n        activate: gainFood('tea'),\r\n    },\r\n    {\r\n        icon: '🥡',\r\n        title: 'Takeout',\r\n        description: 'Sell food for money',\r\n        type: 0,\r\n        cost: 0,\r\n        activate(player, numberOfMeeples = 1) {\r\n            return player.selectFood().then(({ foodType, amount }) => (\r\n                player.loseFood(foodType, amount)\r\n                    .then(() => player.gainMoney(amount * numberOfMeeples))\r\n                    .catch((error) => {\r\n                        alert(error);\r\n                        return this.activate(player);\r\n                    })\r\n            )); \r\n        },\r\n    },\r\n    {\r\n        icon: '👩‍🍳',\r\n        title: 'Hire',\r\n        description: 'Hire a worker (new meeple)',\r\n        type: 0,\r\n        cost: 0,\r\n        activate(player, numberOfMeeples) {},\r\n    },\r\n    {\r\n        icon: '🛠️',\r\n        title: 'Improve',\r\n        description: 'Improve your restaurant (buy tiles)',\r\n        type: 0,\r\n        cost: 0,\r\n        activate(player, numberOfMeeples) {\r\n            return player.selectTile()\r\n                .then(tile => player.placeTile(tile), alert)\r\n                .catch((error) => {\r\n                    alert(error);\r\n                    return this.activate(player);\r\n                });\r\n        },\r\n    },\r\n    {\r\n        icon: '🍽️',\r\n        title: 'Dining',\r\n        description: 'Get points for food',\r\n        type: 0,\r\n        cost: 0,\r\n        activate(player, numberOfMeeples = 1) {\r\n            return player.selectOrder()\r\n                .then(selectedOrder => player.fulfilOrder(selectedOrder), alert)\r\n                .catch((error) => {\r\n                    alert(error);\r\n                    return this.activate(player);\r\n                });\r\n        }\r\n    },\r\n    {\r\n        icon: '🧩',\r\n        name: 'Rearrange',\r\n        text: 'Rearrange tiles on your board',\r\n        type: 0,\r\n        cost: 0,\r\n        activate(playerState, numberOfMeeples) {},\r\n    },\r\n];\r\n\r\nexport const emptyTile = {\r\n    icon: '',\r\n    title: '',\r\n    description: '',\r\n    type: 0,\r\n    cost: 0,\r\n    position: 'x',\r\n    activate(playerState, numberOfMeeples) {},  \r\n};\r\n\r\nexport const fancyTiles = [\r\n    {\r\n        icon: '🍵 / 🍜',\r\n        title: 'Tea or Noodles',\r\n        description: 'make either tea or noodles',\r\n        type: 1,\r\n        cost: 2,\r\n        activate(player, numberOfMeeples = 1) {\r\n            return gainSelectedFoodExcept('sushi', this, player, numberOfMeeples);\r\n        },\r\n    },\r\n    {\r\n        icon: '🍵 / 🍣',\r\n        title: 'Tea or Sushi',\r\n        description: 'make either tea or sushi',\r\n        type: 1,\r\n        cost: 2,\r\n        activate(player, numberOfMeeples = 1) {\r\n            return gainSelectedFoodExcept('noodles', this, player, numberOfMeeples);\r\n        },\r\n    },\r\n    {\r\n        icon: '🍣 / 🍜',\r\n        title: 'Sushi or Noodles',\r\n        description: 'make either sushi or noodles',\r\n        type: 1,\r\n        cost: 2,\r\n        activate(player, numberOfMeeples = 1) {\r\n            return gainSelectedFoodExcept('tea', this, player, numberOfMeeples);\r\n        },\r\n    },\r\n    {\r\n        icon: '🥡 / 🍽️',\r\n        title: 'Sell or Dine',\r\n        description: 'discard food for money or fulfil an order',\r\n        type: 1,\r\n        cost: 4,\r\n        activate(player, numberOfMeeples = 1) {\r\n        },\r\n    },\r\n    {\r\n        icon: '🥡🥡',\r\n        title: 'Sell 2 food',\r\n        description: 'sell 2 food',\r\n        type: 1,\r\n        cost: 3,\r\n        activate(player, numberOfMeeples = 1) {\r\n            return sellAFood(player, numberOfMeeples)\r\n                .then(() => sellAFood(player, numberOfMeeples))\r\n                .catch((error) => {\r\n                    return this.activate(player);\r\n                });\r\n        },\r\n    },\r\n];\r\n\r\nexport default baseTiles;","import baseTiles, { emptyTile } from './tiles';\r\n\r\nemptyTile.icon = '🍵 + 1';\r\n\r\nconst generateRandomSequence = (n = 8) => {\r\n  const allValues = Array.from(new Array(n), (_, i) => i);\r\n  const result = [];\r\n\r\n  for (let i = 0; i < n; i += 1) {\r\n    const selectedIndex = Math.floor(Math.random() * allValues.length);\r\n    const selected = allValues.splice(selectedIndex, 1)[0];\r\n    result.push(selected);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst randomizeBoard = () => {\r\n  const sequence = generateRandomSequence(baseTiles.length);\r\n  const board = sequence.map((i, j) => ({ ...baseTiles[i], position: j }));\r\n  board.x = emptyTile;\r\n  return board;\r\n};\r\n\r\nconst playerHasFoodForOrder = (playerFoods, order) => Object.entries(order.foods)\r\n.map(([foodType, amount]) => playerFoods[foodType] >= amount)\r\n.every(hasFoodType => hasFoodType === true);\r\n\r\nconst createPlayer = (name, ordersLine, tileMarket) => {\r\n  const board = randomizeBoard();\r\n  const modifiers = {\r\n    gainFood(foodType, amount) {\r\n      if (foodType === 'tea') {\r\n        this.gainFood('tea', 1, false);\r\n      }\r\n    }\r\n  };\r\n  const foods = { sushi: 0, noodles: 0, tea: 0 };\r\n  let position = 0;\r\n  let money = 0;\r\n  let points = 0;\r\n  let initiateSelectFood = () => Promise.resolve();\r\n  let initiateSelectOrder = () => Promise.resolve();\r\n  let initiateSelectTile = () => Promise.resolve();\r\n  let initiateTilePlacement = () => Promise.resolve();\r\n  let notifyOnMove = () => {};\r\n  let isSelecting = null;\r\n\r\n  return {\r\n    allowSelectFood(newSetter) {\r\n      initiateSelectFood = newSetter;\r\n    },\r\n    allowSelectOrder(newSetter) {\r\n      initiateSelectOrder = newSetter;\r\n    },\r\n    allowSelectTile(newSetter) {\r\n      initiateSelectTile = newSetter;\r\n    },\r\n    allowPlaceTile(newSetter) {\r\n      initiateTilePlacement = newSetter;\r\n    },\r\n    gainMoney(amount) {\r\n      money += amount;\r\n    },\r\n    async loseMoney(amount) {\r\n      if (money < amount) {\r\n        throw new Error('Not enough money');\r\n      }\r\n\r\n      money -= amount;\r\n    },\r\n    gainPoints(amount) {\r\n      points += amount;\r\n    },\r\n    gainFood(type, amount, callModifiers = true) {\r\n      if (!foods[type]) {\r\n        foods[type] = 0;\r\n      }\r\n\r\n      if (callModifiers && modifiers['gainFood']) {\r\n        modifiers.gainFood.call(this, type, amount);\r\n      }\r\n\r\n      foods[type] += amount;\r\n    },\r\n    async loseFood(type, amount) {\r\n      if (!foods[type] || foods[type] < amount) {\r\n        throw new Error(`Not enough ${type}`);\r\n      }\r\n\r\n      foods[type] -= amount;\r\n    },\r\n    selectFood(checkIfHas = true) {\r\n      if (isSelecting) {\r\n        throw new Error(`already selecting ${isSelecting}`);\r\n      }\r\n\r\n      const allFood = Object.entries(foods).reduce((result, [_, amount]) => result + amount, 0);\r\n      if (checkIfHas && allFood === 0) { throw new Error('Not enough food'); }\r\n\r\n      isSelecting = 'food';\r\n      return initiateSelectFood()\r\n        .finally(() => {\r\n          isSelecting = null;\r\n        });\r\n    },\r\n    currentMoney() {\r\n      return money;\r\n    },\r\n    currentScore() {\r\n      return points;\r\n    },\r\n    currentFood() {\r\n      return {...foods};\r\n    },\r\n    currentBoard() {\r\n      return board;\r\n    },\r\n    getPosition() {\r\n      return position;\r\n    },\r\n    onMove(cb) {\r\n      notifyOnMove = cb;\r\n    },\r\n    move(target) {\r\n      if (isSelecting) throw new Error(`select ${isSelecting} first`);\r\n\r\n      const validForSmall = position < 6 && (position < target && target - position <= 2);\r\n      const validForSix = position === 6 && (target === 7 || target === 0);\r\n      const validForSeven = position === 7 && (target === 0 || target === 1);\r\n      \r\n      if (validForSmall || validForSix || validForSeven) {\r\n        position = target;\r\n        return Promise.resolve()\r\n          .then(() => board[target].activate(this))\r\n          .finally(notifyOnMove);\r\n      }\r\n\r\n      throw new Error('Illigal move');\r\n    },\r\n    async selectOrder(allOrders) {\r\n      if (isSelecting) { throw new Error(`already selecting ${isSelecting}`)};\r\n\r\n      const hasValidOptions = ordersLine.currentOrders()\r\n        .map(order => playerHasFoodForOrder(foods, order))\r\n        .some(canFulfil => canFulfil === true);\r\n      \r\n      if (!hasValidOptions) { throw new Error('Cannot fulfil any orders right now'); }\r\n\r\n      return initiateSelectOrder();\r\n    },\r\n    async fulfilOrder(selectedOrder) {\r\n      const foodItems = Object.entries(selectedOrder.foods);\r\n      \r\n      if (!playerHasFoodForOrder(foods, selectedOrder)) {\r\n        throw new Error('Cannot fulfil order');\r\n      }\r\n\r\n      foodItems.forEach(([type, amount]) => {\r\n        this.loseFood(type, amount);\r\n      });\r\n\r\n      ordersLine.discardOrder(selectedOrder.id);\r\n      this.gainPoints(selectedOrder.points);\r\n      this.gainMoney(selectedOrder.money);\r\n    },\r\n    async selectTile() {\r\n      if (isSelecting) { throw new Error(`already selecting ${isSelecting}`)};\r\n\r\n      const canBuyATile = tileMarket\r\n        .map(tile => money >= tile.cost)\r\n        .some(canBuy => canBuy === true);\r\n\r\n      if (!canBuyATile) {\r\n        throw new Error('cannot afford any tiles');\r\n      }\r\n  \r\n      isSelecting = true;\r\n      return initiateSelectTile();\r\n    },\r\n    async placeTile(selectedTile) {\r\n      return this.loseMoney(selectedTile.cost)\r\n        .then(initiateTilePlacement)\r\n        .then((selectedPosition) => {\r\n          board[selectedPosition] = { ...selectedTile, position: selectedPosition };  \r\n        }).finally(() => { isSelecting = false; });\r\n    },\r\n  };\r\n};\r\n\r\nexport default createPlayer;","const foodTypes = ['sushi', 'noodles', 'tea'];\r\n\r\nconst chooseRandomFood = () => foodTypes[Math.floor(Math.random() * 3)];\r\n\r\nexport const createOrder = (id, min = 2, max = 6) => {\r\n    const itemCount = Math.floor(Math.random() * (max - 1)) + min;\r\n\r\n    return Array.from(new Array(itemCount), chooseRandomFood).reduce((result, foodType) => {\r\n        if (!result.foods[foodType]) {\r\n            result.foods[foodType] = 0;\r\n        }\r\n\r\n        result.foods[foodType] += 1;\r\n\r\n        return result;\r\n    }, { id, foods: {}, points: 2* (itemCount -1) - 1, money: Math.min(itemCount - 1, 4) });\r\n};\r\n\r\nconst createOrdersLine = (n = 3) => {\r\n  const orders = Array.from(new Array(3), (_, i) => createOrder(i));\r\n\r\n  return {\r\n    currentOrders() { \r\n      return [...orders].filter(o => o);\r\n    },\r\n    discardOrder(id) {\r\n      delete orders[id];\r\n      orders[orders.length] = createOrder(orders.length);\r\n    },\r\n  };\r\n};\r\n\r\nexport default createOrdersLine;","import React from 'react';\nimport createPlayer from './player';\nimport createOrdersLine from './orders';\nimport { fancyTiles } from './tiles';\n\nimport './App.css';\n\nconst orderTilesInGrid = (tiles) => ([\n  [tiles[0], tiles[1], tiles[2]], \n  [tiles[7], tiles.x,  tiles[3]],\n  [tiles[6], tiles[5], tiles[4]],\n]);\n\nconst Board = (props) => (\n  <table class=\"player-board\">\n  {\n    orderTilesInGrid(props.player.currentBoard()).map(row => (\n      <tr>\n        {row.map(tile => <td onClick={\n          () => Promise.resolve()\n            .then(() => props.onPlaceTile\n              ? props.onPlaceTile(tile.position)\n              : props.player.move(tile.position))\n            .catch(alert)\n        }>{tile.icon} {props.player.getPosition() === tile.position ? '♟️' : ''}</td>)}\n      </tr>\n    ))\n  }\n  </table>\n);\n\nconst stats = {\n  money: { symbol: '💸' },\n  points: { symbol: '⭐' },\n  sushi: { symbol: '🍣', type: 'food' },\n  noodles: { symbol: '🍜', type: 'food' },\n  tea: { symbol: '🍵', type: 'food' },\n};\n\nconst PlayerStats = (props) => {\n  const playerStats = Object.entries({\n    money: props.player.currentMoney(),\n    points: props.player.currentScore(),\n    ...props.player.currentFood(),\n  }).reduce((result, [statName, value]) => {\n    if (!result[value]) {\n      result[value] = [];\n    }\n    \n    const statElement = stats[statName].type === 'food'\n      ? <div onClick={() => props.onSelectFood(statName)}>{stats[statName].symbol}</div>\n      : <div>{stats[statName].symbol}</div>\n\n    result[value].push(statElement);\n\n    return result;\n  }, Array.from(new Array(11)));\n\n  return <table class=\"player-stats\">\n    <tr>\n      {Object.keys(playerStats).map(i => <td>{playerStats[i] || []}</td>)}\n    </tr>\n    <tr>\n      {Object.keys(playerStats).map(i => <td>{i}</td>)}\n    </tr>\n  </table>\n};\n\nconst orders = createOrdersLine();\n\nconst p1 = createPlayer('p1', orders, fancyTiles);\n\nconst Order = ({ id, foods, points, onSelect, money }) => (\n  <div class=\"order\" onClick={() => onSelect({ id, foods, points, money })}>\n    {Object.entries(foods).map(([type, amount]) => <span>{amount} {stats[type].symbol}</span>)}\n    <div>{points} {stats.points.symbol}  {money} {stats.money.symbol}</div>\n  </div>\n);\n\nconst Orders = (props) => (\n  <div>\n    {props.orders.map(o => <Order { ...o} onSelect={props.onSelectOrder} />)}\n  </div>\n);\n\nconst MarketTile = ({ icon, cost, description,  onSelect, ...tileProps }) => (\n  <td onClick={() => onSelect({ icon, cost, ...tileProps })}>\n    {icon} <div>cost: {cost}💸</div><div class=\"tooltip\">{description}</div>\n  </td>\n);\n\nconst TilesMarket = ({ onSelect }) => (<table className=\"player-board small-font\">\n  <tr>\n    {fancyTiles.map(fT => <MarketTile {...fT} onSelect={onSelect} />)}\n  </tr>\n</table>);\n\nfunction App() {\n  const [turns, setTurns] = React.useState(0);\n  const [canMove, setCanMove] = React.useState(true);\n  const [actionRequired, setActionRequired] = React.useState('');\n  const [selectFood, setSelectFood] = React.useState(() => () => {});\n  const [selectOrder, setSelectOrder] = React.useState(() => () => {});\n  const [selectMarketTile, setSelectMarketTile] = React.useState(() => () => {});\n  const [selectTilePlacement, setSelectTilePlacement] = React.useState(null);\n   p1.onMove(() => setTurns(t => t + 1));\n\n   p1.allowSelectFood(() => {\n    return new Promise((resolve, reject) => {\n      setCanMove(false);\n      setSelectFood(() => foodType => resolve({ foodType, amount: 1 }));\n      setActionRequired('Select food');\n    }).finally(() => {\n      setCanMove(true);\n      setSelectFood(() => () => {});\n      setActionRequired('');\n    });\n  });\n\n  p1.allowSelectOrder(() => {\n    return new Promise((resolve, reject) => {\n      setCanMove(false);\n      setSelectOrder(() => order => resolve(order));\n      setActionRequired('Select order');\n    }).finally(() => {\n      setCanMove(true);\n      setSelectOrder(() => () => {});\n      setActionRequired('');\n    });\n  });\n\n  p1.allowSelectTile(() => {\n    return new Promise((resolve, reject) => {\n      setCanMove(false);\n      setSelectMarketTile(() => tile => resolve(tile));\n      setActionRequired('Select a tile from the market');\n    }).finally(() => {\n      setCanMove(true);\n      setSelectMarketTile(() => () => {});\n      setActionRequired('');\n    });\n  });\n\n  p1.allowPlaceTile(() => {\n    return new Promise((resolve, reject) => {\n      setCanMove(false);\n      setSelectTilePlacement(() => position => resolve(position));\n      setActionRequired('Place the tile on your board');\n    }).finally(() => {\n      setCanMove(true);\n      setSelectTilePlacement(null);\n      setActionRequired('');\n    });\n  });\n\n  return (\n    <div class=\"wrapper\">\n      <div>Turn: {turns} {actionRequired}</div>\n      <Board player={p1} refresh={() => { setTurns(s => s+1); }} onPlaceTile={selectTilePlacement} />\n      <div class=\"float-right\">\n        <Orders orders={orders.currentOrders()} onSelectOrder={selectOrder} />\n        <PlayerStats player={p1} onSelectFood={selectFood} />\n        <TilesMarket onSelect={selectMarketTile} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}