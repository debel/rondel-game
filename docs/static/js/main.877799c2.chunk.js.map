{"version":3,"sources":["orders.js","tiles.js","player.js","App.js","serviceWorker.js","index.js"],"names":["foodTypes","chooseRandomFood","Math","floor","random","createOrder","id","min","max","itemCount","Array","from","reduce","result","foodType","foods","points","money","createOrdersLine","orders","_","i","currentOrders","filter","o","discardOrder","length","defaultOrdersLine","playerHasFoodForOrder","playerFoods","order","Object","entries","map","amount","every","hasFoodType","gainFood","player","numberOfMeeples","Promise","resolve","gainSelectedFoodExcept","forbiddenFood","tile","selectFood","then","alert","activate","sellAFood","loseFood","gainMoney","emptyTile","icon","title","description","type","cost","position","playerState","fancyTiles","this","thisTile","selectAction","action","baseTiles","catch","error","hasAnyFood","Error","currentMoney","some","canBuy","selectTile","loseMoney","placeTile","currentFood","canFulfil","selectOrder","selectedOrder","fulfilOrder","name","text","SELECTING_OPTIONS","randomizeBoard","board","n","allValues","selectedIndex","selected","splice","push","generateRandomSequence","j","x","createPlayer","ordersLine","tileMarket","modifiers","sushi","noodles","tea","totalFood","isSelecting","setState","notifyOnMove","resolveSelect","initiateSelect","options","reject","value","onSetState","setter","gainPoints","callModifiers","call","currentScore","currentBoard","currentPosition","onMove","cb","move","target","finally","foodItems","forEach","selectedTile","selectedPosition","undefined","uiSelection","option","Board","props","class","tiles","orderTilesInGrid","row","onClick","onPlaceTile","stats","symbol","PlayerStats","playerStats","statName","statElement","onSelectFood","keys","p1","Order","onSelect","Orders","onSelectOrder","MarketTile","tileProps","TilesMarket","className","fT","ActionOptions","forceRefresh","App","React","useState","turns","setTurns","setX","setIsSelecting","actionOptions","setActionOptions","selector","useEffect","t","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.877799c2.chunk.js","sourcesContent":["const foodTypes = ['sushi', 'noodles', 'tea'];\r\n\r\nconst chooseRandomFood = () => foodTypes[Math.floor(Math.random() * 3)];\r\n\r\nexport const createOrder = (id, min = 2, max = 6) => {\r\n    const itemCount = Math.floor(Math.random() * (max - 1)) + min;\r\n\r\n    return Array.from(new Array(itemCount), chooseRandomFood).reduce((result, foodType) => {\r\n        if (!result.foods[foodType]) {\r\n            result.foods[foodType] = 0;\r\n        }\r\n\r\n        result.foods[foodType] += 1;\r\n\r\n        return result;\r\n    }, { id, foods: {}, points: 2* (itemCount -1) - 1, money: Math.min(itemCount - 1, 4) });\r\n};\r\n\r\nconst createOrdersLine = (n = 3) => {\r\n  const orders = Array.from(new Array(3), (_, i) => createOrder(i));\r\n\r\n  return {\r\n    currentOrders() { \r\n      return [...orders].filter(o => o);\r\n    },\r\n    discardOrder(id) {\r\n      delete orders[id];\r\n      orders[orders.length] = createOrder(orders.length);\r\n    },\r\n  };\r\n};\r\n\r\nexport default createOrdersLine;\r\n\r\nexport const defaultOrdersLine = createOrdersLine();\r\n\r\nexport const playerHasFoodForOrder = (playerFoods, order) => Object.entries(order.foods)\r\n.map(([foodType, amount]) => playerFoods[foodType] >= amount)\r\n.every(hasFoodType => hasFoodType === true);\r\n","import { defaultOrdersLine, playerHasFoodForOrder } from './orders';\r\n\r\nconst gainFood = foodType => (player, numberOfMeeples = 1) => {\r\n  return Promise.resolve(player.gainFood(foodType, numberOfMeeples));\r\n};\r\n\r\nconst gainSelectedFoodExcept = (forbiddenFood, tile, player, numberOfMeeples = 1) => {\r\n  return player.selectFood(false)\r\n    .then(({ foodType, amount }) => {\r\n      if (foodType === forbiddenFood) {\r\n        alert(`Cannot make ${forbiddenFood} here`);\r\n        return tile.activate(player, numberOfMeeples);\r\n      }\r\n      return player.gainFood(foodType, numberOfMeeples);\r\n    });\r\n};\r\n\r\nconst sellAFood = (player, numberOfMeeples = 1) => player.selectFood().then(({ foodType, amount }) => (\r\n  player.loseFood(foodType, amount)\r\n    .then(() => player.gainMoney(amount * numberOfMeeples))\r\n));\r\n\r\nexport const emptyTile = {\r\n  icon: '',\r\n  title: '',\r\n  description: '',\r\n  type: 0,\r\n  cost: 0,\r\n  position: 'x',\r\n  activate(playerState, numberOfMeeples) { },\r\n};\r\n\r\nexport const fancyTiles = [\r\n  {\r\n    icon: '🍵 / 🍜',\r\n    title: 'Tea or Noodles',\r\n    description: 'make either tea or noodles',\r\n    type: 1,\r\n    cost: 2,\r\n    activate(player, numberOfMeeples = 1) {\r\n      return gainSelectedFoodExcept('sushi', this, player, numberOfMeeples);\r\n    },\r\n  },\r\n  {\r\n    icon: '🍵 / 🍣',\r\n    title: 'Tea or Sushi',\r\n    description: 'make either tea or sushi',\r\n    type: 1,\r\n    cost: 2,\r\n    activate(player, numberOfMeeples = 1) {\r\n      return gainSelectedFoodExcept('noodles', this, player, numberOfMeeples);\r\n    },\r\n  },\r\n  {\r\n    icon: '🍣 / 🍜',\r\n    title: 'Sushi or Noodles',\r\n    description: 'make either sushi or noodles',\r\n    type: 1,\r\n    cost: 2,\r\n    activate(player, numberOfMeeples = 1) {\r\n      return gainSelectedFoodExcept('tea', this, player, numberOfMeeples);\r\n    },\r\n  },\r\n  {\r\n    icon: '🥡 / 🍽️',\r\n    title: 'Sell or Dine',\r\n    description: 'discard food for money or fulfil an order',\r\n    type: 1,\r\n    cost: 4,\r\n    activate(player, numberOfMeeples = 1) {\r\n      const thisTile = this;\r\n      return player.selectAction([\r\n        { icon: '🍽️', action() { return baseTiles[6].activate(player).catch(error => {\r\n          alert(error);\r\n          return thisTile.activate(player);\r\n        }); }},\r\n        { icon: '🥡', action() { return baseTiles[3].activate(player).catch(error => {\r\n          alert(error);\r\n          return thisTile.activate(player);\r\n        }); }},\r\n      ]);\r\n    },\r\n  },\r\n  {\r\n    icon: '🥡🥡',\r\n    title: 'Sell 2 food',\r\n    description: 'sell 2 food',\r\n    type: 1,\r\n    cost: 3,\r\n    activate(player, numberOfMeeples = 1) {\r\n      return sellAFood(player, numberOfMeeples)\r\n        .then(() => sellAFood(player, numberOfMeeples))\r\n        .catch((error) => {\r\n          return this.activate(player);\r\n        });\r\n    },\r\n  },\r\n];\r\n\r\nconst baseTiles = [\r\n  {\r\n    icon: '🍣',\r\n    title: 'Sushi',\r\n    description: 'Cook some sushi',\r\n    type: 0,\r\n    cost: 0,\r\n    activate: gainFood('sushi'),\r\n  },\r\n  {\r\n    icon: '🍜',\r\n    title: 'Noodles',\r\n    description: 'Cook some noodles',\r\n    type: 0,\r\n    cost: 0,\r\n    activate: gainFood('noodles'),\r\n  },\r\n  {\r\n    icon: '🍵',\r\n    title: 'Tea',\r\n    description: 'Produce some tea',\r\n    type: 0,\r\n    cost: 0,\r\n    activate: gainFood('tea'),\r\n  },\r\n  {\r\n    icon: '🥡',\r\n    title: 'Takeout',\r\n    description: 'Sell food for money',\r\n    type: 0,\r\n    cost: 0,\r\n    async activate(player, numberOfMeeples = 1) {\r\n      if (!player.hasAnyFood()) { throw new Error('no food to sell'); }\r\n\r\n      return player.selectFood().then(({ foodType, amount }) => (\r\n        player.loseFood(foodType, amount)\r\n          .then(() => player.gainMoney(amount * numberOfMeeples))\r\n          .catch((error) => {\r\n            alert(error);\r\n            return this.activate(player);\r\n          })\r\n      ));\r\n    },\r\n  },\r\n  {\r\n    icon: '👩‍🍳',\r\n    title: 'Hire',\r\n    description: 'Hire a worker (new meeple)',\r\n    type: 0,\r\n    cost: 0,\r\n    async activate(player, numberOfMeeples) { },\r\n  },\r\n  {\r\n    icon: '🛠️',\r\n    title: 'Improve',\r\n    description: 'Improve your restaurant (buy tiles)',\r\n    type: 0,\r\n    cost: 0,\r\n    async activate(player, numberOfMeeples) {\r\n      const canBuyATile = fancyTiles\r\n        .map(tile => player.currentMoney() >= tile.cost)\r\n        .some(canBuy => canBuy === true);\r\n\r\n      if (!canBuyATile) {\r\n        throw new Error('cannot afford any tiles');\r\n      }\r\n\r\n      return player.selectTile()\r\n        .then(tile => player.loseMoney(tile.cost)\r\n          .then(\r\n            () => player.placeTile(tile),\r\n            (error) => {\r\n            alert(error);\r\n            return this.activate(player);\r\n          })\r\n        )\r\n    },\r\n  },\r\n  {\r\n    icon: '🍽️',\r\n    title: 'Dining',\r\n    description: 'Fulfil an order',\r\n    type: 0,\r\n    cost: 0,\r\n    async activate(player, numberOfMeeples = 1) {\r\n      const hasValidOptions = defaultOrdersLine.currentOrders()\r\n      .map(order => playerHasFoodForOrder(player.currentFood(), order))\r\n      .some(canFulfil => canFulfil === true);\r\n    \r\n      if (!hasValidOptions) { throw new Error('Cannot fulfil any orders right now'); }\r\n\r\n      return player.selectOrder()\r\n        .then(selectedOrder => player.fulfilOrder(selectedOrder), alert)\r\n        .catch((error) => {\r\n          alert(error);\r\n          return this.activate(player);\r\n      });\r\n    }\r\n  },\r\n  {\r\n    icon: '🧩',\r\n    name: 'Rearrange',\r\n    text: 'Rearrange tiles on your board',\r\n    type: 0,\r\n    cost: 0,\r\n    activate(player, numberOfMeeples) {\r\n    },\r\n  },\r\n];\r\n\r\nexport default baseTiles;","import baseTiles, { emptyTile } from './tiles';\r\n\r\nimport { playerHasFoodForOrder} from './orders';\r\n\r\nexport const SELECTING_OPTIONS = {\r\n  food: 'food',\r\n  tile: 'tile',\r\n  position: 'position',\r\n  order: 'order',\r\n  action: 'action',\r\n};\r\n\r\nconst generateRandomSequence = (n = 8) => {\r\n  const allValues = Array.from(new Array(n), (_, i) => i);\r\n  const result = [];\r\n\r\n  for (let i = 0; i < n; i += 1) {\r\n    const selectedIndex = Math.floor(Math.random() * allValues.length);\r\n    const selected = allValues.splice(selectedIndex, 1)[0];\r\n    result.push(selected);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst randomizeBoard = () => {\r\n  const sequence = generateRandomSequence(baseTiles.length);\r\n  const board = sequence.map((i, j) => ({ ...baseTiles[i], position: j }));\r\n  board.x = emptyTile;\r\n  return board;\r\n};\r\n\r\nconst createPlayer = (name, ordersLine, tileMarket) => {\r\n  const board = randomizeBoard();\r\n  const modifiers = {};\r\n  const foods = { sushi: 0, noodles: 0, tea: 0 };\r\n  let totalFood = 0;\r\n  let position = 0;\r\n  let money = 0;\r\n  let points = 0;\r\n  let isSelecting = null;\r\n  let setState = () => {};\r\n  let notifyOnMove = () => {};\r\n  let resolveSelect = null;\r\n  const initiateSelect = (type, options) => new Promise((resolve, reject) => {\r\n    isSelecting = type;\r\n    setState({ type, options });\r\n    resolveSelect = (value) => {\r\n      isSelecting = null;\r\n      resolveSelect = null;\r\n      setState(null);\r\n      return resolve(value);\r\n    };\r\n  });\r\n\r\n  return {\r\n    onSetState(setter) {\r\n      setState = setter;\r\n    },\r\n    gainMoney(amount) { money += amount; },\r\n    async loseMoney(amount) {\r\n      if (money < amount) { throw new Error('Not enough money'); }\r\n\r\n      money -= amount;\r\n    },\r\n    gainPoints(amount) { points += amount; },\r\n    gainFood(type, amount, callModifiers = true) {\r\n      if (!foods[type]) {\r\n        foods[type] = 0;\r\n      }\r\n\r\n      if (callModifiers && modifiers['gainFood']) {\r\n        modifiers.gainFood.call(this, type, amount);\r\n      }\r\n\r\n      foods[type] += amount;\r\n      totalFood += amount;\r\n    },\r\n    async loseFood(type, amount) {\r\n      if (!foods[type] || foods[type] < amount) {\r\n        throw new Error(`Not enough ${type}`);\r\n      }\r\n\r\n      foods[type] -= amount;\r\n      totalFood -= amount;\r\n    },\r\n    hasAnyFood() {\r\n      return totalFood > 0;\r\n    },\r\n    selectFood() {\r\n      return initiateSelect(SELECTING_OPTIONS.food);\r\n    },\r\n    currentMoney() {\r\n      return money;\r\n    },\r\n    currentScore() {\r\n      return points;\r\n    },\r\n    currentFood() {\r\n      return {...foods};\r\n    },\r\n    currentBoard() {\r\n      return board;\r\n    },\r\n    currentPosition() {\r\n      return position;\r\n    },\r\n    onMove(cb) {\r\n      notifyOnMove = cb;\r\n    },\r\n    move(target) {\r\n      if (isSelecting) throw new Error(`select ${isSelecting} first`);\r\n\r\n      const validForSmall = position < 6 && (position < target && target - position <= 2);\r\n      const validForSix = position === 6 && (target === 7 || target === 0);\r\n      const validForSeven = position === 7 && (target === 0 || target === 1);\r\n      \r\n      if (validForSmall || validForSix || validForSeven) {\r\n        position = target;\r\n        return Promise.resolve()\r\n          .then(() => board[target].activate(this))\r\n          .finally(notifyOnMove);\r\n      }\r\n\r\n      throw new Error('Illigal move');\r\n    },\r\n    async selectOrder() {\r\n      return initiateSelect(SELECTING_OPTIONS.order);\r\n    },\r\n    async fulfilOrder(selectedOrder) {\r\n      const foodItems = Object.entries(selectedOrder.foods);\r\n      \r\n      if (!playerHasFoodForOrder(foods, selectedOrder)) {\r\n        isSelecting = null;\r\n        throw new Error('Cannot fulfil order');\r\n      }\r\n\r\n      foodItems.forEach(([type, amount]) => {\r\n        this.loseFood(type, amount);\r\n      });\r\n\r\n      ordersLine.discardOrder(selectedOrder.id);\r\n      this.gainPoints(selectedOrder.points);\r\n      this.gainMoney(selectedOrder.money);\r\n      isSelecting = null;\r\n    },\r\n    async selectTile() {\r\n      return initiateSelect(SELECTING_OPTIONS.tile);\r\n    },\r\n    async placeTile(selectedTile) {\r\n      return initiateSelect(SELECTING_OPTIONS.position)\r\n        .then((selectedPosition) => {\r\n          board[selectedPosition] = { ...selectedTile, position: selectedPosition };  \r\n          setState(undefined); // force update board;\r\n        })\r\n    },\r\n    uiSelection(type, option) {\r\n      return resolveSelect(option);\r\n    },\r\n    selectAction(options) {\r\n      return initiateSelect(SELECTING_OPTIONS.action, options);\r\n    }\r\n  };\r\n};\r\n\r\nexport default createPlayer;","import React, { useEffect } from 'react';\nimport createPlayer, { SELECTING_OPTIONS } from './player';\nimport { defaultOrdersLine } from './orders';\nimport { fancyTiles } from './tiles';\n\nimport './App.css';\n\nconst orderTilesInGrid = (tiles) => ([\n  [tiles[0], tiles[1], tiles[2]], \n  [tiles[7], tiles.x,  tiles[3]],\n  [tiles[6], tiles[5], tiles[4]],\n]);\n\nconst Board = (props) => (\n  <table class=\"player-board\">\n  {\n    orderTilesInGrid(props.player.currentBoard()).map(row => (\n      <tr>\n        {row.map(tile => <td class=\"board-tile\" onClick={\n          () => Promise.resolve()\n            .then(() => props.onPlaceTile\n              ? props.onPlaceTile(tile.position)\n              : props.player.move(tile.position))\n            .catch(alert)\n        }>{tile.icon} {props.player.currentPosition() === tile.position ? '♟️' : ''}\n          <div class=\"tooltip\">{tile.description}</div>\n        </td>)}\n      </tr>\n    ))\n  }\n  </table>\n);\n\nconst stats = {\n  money: { symbol: '💸' },\n  points: { symbol: '⭐' },\n  sushi: { symbol: '🍣', type: 'food' },\n  noodles: { symbol: '🍜', type: 'food' },\n  tea: { symbol: '🍵', type: 'food' },\n};\n\nconst PlayerStats = (props) => {\n  const playerStats = Object.entries({\n    money: props.player.currentMoney(),\n    points: props.player.currentScore(),\n    ...props.player.currentFood(),\n  }).reduce((result, [statName, value]) => {\n    if (!result[value]) {\n      result[value] = [];\n    }\n    \n    const statElement = stats[statName].type === 'food'\n      ? <div onClick={() => props.onSelectFood && props.onSelectFood({ foodType: statName, amount: 1 })}>{stats[statName].symbol}</div>\n      : <div>{stats[statName].symbol}</div>\n\n    result[value].push(statElement);\n\n    return result;\n  }, Array.from(new Array(11)));\n\n  return <table class=\"player-stats\">\n    <tr>\n      {Object.keys(playerStats).map(i => <td>{playerStats[i] || []}</td>)}\n    </tr>\n    <tr>\n      {Object.keys(playerStats).map(i => <td>{i}</td>)}\n    </tr>\n  </table>\n};\n\nconst orders = defaultOrdersLine;\n\nconst p1 = createPlayer('p1', orders, fancyTiles);\n\nconst Order = ({ id, foods, points, onSelect, money }) => (\n  <div class=\"order\" onClick={() => onSelect && onSelect({ id, foods, points, money })}>\n    {Object.entries(foods).map(([type, amount]) => <span>{amount} {stats[type].symbol}</span>)}\n    <hr/>\n    <div>{points} {stats.points.symbol}  {money} {stats.money.symbol}</div>\n  </div>\n);\n\nconst Orders = (props) => (\n  <div>\n    {props.orders.map(o => <Order { ...o} onSelect={props.onSelectOrder} />)}\n  </div>\n);\n\nconst MarketTile = ({ icon, cost, description,  onSelect, ...tileProps }) => (\n  <td class=\"market-tile\" onClick={() => onSelect && onSelect({ icon, cost, ...tileProps })}>\n    {icon}<hr/><div>cost: {cost}💸</div><div class=\"tooltip\">{description}</div>\n  </td>\n);\n\nconst TilesMarket = ({ onSelect }) => (<table className=\"player-board small-font\">\n  <tr>\n    {fancyTiles.map(fT => <MarketTile {...fT} onSelect={onSelect} />)}\n  </tr>\n</table>);\n\nconst ActionOptions = ({ options, forceRefresh }) => (\n  options && <div class=\"action-options\">\n    {options.map(option => (\n      <div class=\"action-option\" onClick={() => option.action().then(forceRefresh)}>{option.icon}</div>\n    ))}\n  </div>\n);\n\nfunction App() {\n  const [turns, setTurns] = React.useState(0);\n  const [x, setX] = React.useState(0);\n  const [isSelecting, setIsSelecting] = React.useState(null);\n  const [actionOptions, setActionOptions] = React.useState(null); \n  const selector = type => (isSelecting && isSelecting === type)\n    ? option => p1.uiSelection(type, option) \n    : null;\n\n  useEffect(() => {\n    p1.onMove(() => setTurns(t => t + 1));\n\n    p1.onSetState(state => {\n      const { type = null, options = null } = state || {};\n      setIsSelecting(type);\n      setActionOptions(options);\n    });\n  }, []);\n\n  return (\n    <div class=\"wrapper\">\n      <div>Turn: {turns} {isSelecting ? `Select ${isSelecting}` : ''}</div>\n      <ActionOptions options={actionOptions} forceRefresh={() => setX(x => x+1)} />\n      <div class=\"float-left\">\n        <Board player={p1} onPlaceTile={selector(SELECTING_OPTIONS.position)} />\n        <PlayerStats player={p1} onSelectFood={selector(SELECTING_OPTIONS.food)} />\n      </div>\n      <div class=\"float-right\">\n        <Orders \n          orders={orders.currentOrders()}\n          onSelectOrder={selector(SELECTING_OPTIONS.order)}\n        />\n        <TilesMarket onSelect={selector(SELECTING_OPTIONS.tile)} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}